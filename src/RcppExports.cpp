// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// v
double v(double o, double alpha, double beta, double lambda);
RcppExport SEXP choicepp_v(SEXP oSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type o(oSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(v(o, alpha, beta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// v_wrapper
double v_wrapper(double o, std::vector<double> par, int type);
RcppExport SEXP choicepp_v_wrapper(SEXP oSEXP, SEXP parSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type o(oSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(v_wrapper(o, par, type));
    return rcpp_result_gen;
END_RCPP
}
// w_tk
double w_tk(double p, double o, double gamma_l, double gamma_g);
RcppExport SEXP choicepp_w_tk(SEXP pSEXP, SEXP oSEXP, SEXP gamma_lSEXP, SEXP gamma_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type o(oSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_g(gamma_gSEXP);
    rcpp_result_gen = Rcpp::wrap(w_tk(p, o, gamma_l, gamma_g));
    return rcpp_result_gen;
END_RCPP
}
// w_ge
double w_ge(double p, double o, double delta_l, double delta_g, double gamma_l, double gamma_g);
RcppExport SEXP choicepp_w_ge(SEXP pSEXP, SEXP oSEXP, SEXP delta_lSEXP, SEXP delta_gSEXP, SEXP gamma_lSEXP, SEXP gamma_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type o(oSEXP);
    Rcpp::traits::input_parameter< double >::type delta_l(delta_lSEXP);
    Rcpp::traits::input_parameter< double >::type delta_g(delta_gSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_g(gamma_gSEXP);
    rcpp_result_gen = Rcpp::wrap(w_ge(p, o, delta_l, delta_g, gamma_l, gamma_g));
    return rcpp_result_gen;
END_RCPP
}
// w_p
double w_p(double p, double o, double delta_l, double gamma_l, double delta_g, double gamma_g);
RcppExport SEXP choicepp_w_p(SEXP pSEXP, SEXP oSEXP, SEXP delta_lSEXP, SEXP gamma_lSEXP, SEXP delta_gSEXP, SEXP gamma_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type o(oSEXP);
    Rcpp::traits::input_parameter< double >::type delta_l(delta_lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< double >::type delta_g(delta_gSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_g(gamma_gSEXP);
    rcpp_result_gen = Rcpp::wrap(w_p(p, o, delta_l, gamma_l, delta_g, gamma_g));
    return rcpp_result_gen;
END_RCPP
}
// w_wrapper
double w_wrapper(double p, double o, std::vector<double> par, int type);
RcppExport SEXP choicepp_w_wrapper(SEXP pSEXP, SEXP oSEXP, SEXP parSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type o(oSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(w_wrapper(p, o, par, type));
    return rcpp_result_gen;
END_RCPP
}
// utility
double utility(NumericVector opt, std::vector<double> par, int type);
RcppExport SEXP choicepp_utility(SEXP optSEXP, SEXP parSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type opt(optSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(utility(opt, par, type));
    return rcpp_result_gen;
END_RCPP
}
// cpt_prob
std::vector<double> cpt_prob(std::vector<double> par, GenericVector problems, int type);
RcppExport SEXP choicepp_cpt_prob(SEXP parSEXP, SEXP problemsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpt_prob(par, problems, type));
    return rcpp_result_gen;
END_RCPP
}
// cpt_lik
double cpt_lik(std::vector<double> par, GenericVector problems, std::vector<int> choices, int type, double limit);
RcppExport SEXP choicepp_cpt_lik(SEXP parSEXP, SEXP problemsSEXP, SEXP choicesSEXP, SEXP typeSEXP, SEXP limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type limit(limitSEXP);
    rcpp_result_gen = Rcpp::wrap(cpt_lik(par, problems, choices, type, limit));
    return rcpp_result_gen;
END_RCPP
}
// cpt_choice
std::vector<int> cpt_choice(std::vector<double> par, GenericVector problems, int type);
RcppExport SEXP choicepp_cpt_choice(SEXP parSEXP, SEXP problemsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpt_choice(par, problems, type));
    return rcpp_result_gen;
END_RCPP
}
// cpt_rndchoice
std::vector<int> cpt_rndchoice(std::vector<double> par, GenericVector problems, int type);
RcppExport SEXP choicepp_cpt_rndchoice(SEXP parSEXP, SEXP problemsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpt_rndchoice(par, problems, type));
    return rcpp_result_gen;
END_RCPP
}
// stdom1
bool stdom1(std::vector<double> oA, std::vector<double> pA, std::vector<double> oB, std::vector<double> pB);
RcppExport SEXP choicepp_stdom1(SEXP oASEXP, SEXP pASEXP, SEXP oBSEXP, SEXP pBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type oA(oASEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type oB(oBSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type pB(pBSEXP);
    rcpp_result_gen = Rcpp::wrap(stdom1(oA, pA, oB, pB));
    return rcpp_result_gen;
END_RCPP
}
// stdom2
bool stdom2(std::vector<double> oA, std::vector<double> pA, std::vector<double> oB, std::vector<double> pB, double d_crit);
RcppExport SEXP choicepp_stdom2(SEXP oASEXP, SEXP pASEXP, SEXP oBSEXP, SEXP pBSEXP, SEXP d_critSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type oA(oASEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type oB(oBSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type pB(pBSEXP);
    Rcpp::traits::input_parameter< double >::type d_crit(d_critSEXP);
    rcpp_result_gen = Rcpp::wrap(stdom2(oA, pA, oB, pB, d_crit));
    return rcpp_result_gen;
END_RCPP
}
// pgen_rnd
NumericMatrix pgen_rnd(std::vector<int> ns, int nA, int nB, double lower, double upper, bool ecological, bool stdom1_test, bool stdom2_test, double d_crit);
RcppExport SEXP choicepp_pgen_rnd(SEXP nsSEXP, SEXP nASEXP, SEXP nBSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP ecologicalSEXP, SEXP stdom1_testSEXP, SEXP stdom2_testSEXP, SEXP d_critSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type nA(nASEXP);
    Rcpp::traits::input_parameter< int >::type nB(nBSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type ecological(ecologicalSEXP);
    Rcpp::traits::input_parameter< bool >::type stdom1_test(stdom1_testSEXP);
    Rcpp::traits::input_parameter< bool >::type stdom2_test(stdom2_testSEXP);
    Rcpp::traits::input_parameter< double >::type d_crit(d_critSEXP);
    rcpp_result_gen = Rcpp::wrap(pgen_rnd(ns, nA, nB, lower, upper, ecological, stdom1_test, stdom2_test, d_crit));
    return rcpp_result_gen;
END_RCPP
}
// p_arrange
GenericVector p_arrange(NumericMatrix problems, int nA);
RcppExport SEXP choicepp_p_arrange(SEXP problemsSEXP, SEXP nASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< int >::type nA(nASEXP);
    rcpp_result_gen = Rcpp::wrap(p_arrange(problems, nA));
    return rcpp_result_gen;
END_RCPP
}
// smpl
double smpl(std::vector<double> opt);
RcppExport SEXP choicepp_smpl(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(smpl(opt));
    return rcpp_result_gen;
END_RCPP
}
// smpl_f
double smpl_f(NumericVector opt);
RcppExport SEXP choicepp_smpl_f(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(smpl_f(opt));
    return rcpp_result_gen;
END_RCPP
}
// smpl_n
std::vector<double> smpl_n(NumericVector opt, int n);
RcppExport SEXP choicepp_smpl_n(SEXP optSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type opt(optSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(smpl_n(opt, n));
    return rcpp_result_gen;
END_RCPP
}
// sampl_n
GenericVector sampl_n(GenericVector prob, std::vector<int> ns);
RcppExport SEXP choicepp_sampl_n(SEXP probSEXP, SEXP nsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type ns(nsSEXP);
    rcpp_result_gen = Rcpp::wrap(sampl_n(prob, ns));
    return rcpp_result_gen;
END_RCPP
}
// edit1
std::vector<double> edit1(std::vector<double> ss, int size);
RcppExport SEXP choicepp_edit1(SEXP ssSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(edit1(ss, size));
    return rcpp_result_gen;
END_RCPP
}
// edit2
std::vector<double> edit2(std::vector<double> ss, NumericVector opt);
RcppExport SEXP choicepp_edit2(SEXP ssSEXP, SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(edit2(ss, opt));
    return rcpp_result_gen;
END_RCPP
}
// edit_exp
GenericVector edit_exp(GenericVector ss, GenericVector prob);
RcppExport SEXP choicepp_edit_exp(SEXP ssSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(edit_exp(ss, prob));
    return rcpp_result_gen;
END_RCPP
}
// u
double u(double o, double alpha);
RcppExport SEXP choicepp_u(SEXP oSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type o(oSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(u(o, alpha));
    return rcpp_result_gen;
END_RCPP
}
// t
double t(double p, double gamma);
RcppExport SEXP choicepp_t(SEXP pSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(t(p, gamma));
    return rcpp_result_gen;
END_RCPP
}
// w
double w(double pi, double pk, double delta, double gamma, double n);
RcppExport SEXP choicepp_w(SEXP piSEXP, SEXP pkSEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type pk(pkSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(w(pi, pk, delta, gamma, n));
    return rcpp_result_gen;
END_RCPP
}
// utility_tax
double utility_tax(NumericVector opt, std::vector<double> par, int type);
RcppExport SEXP choicepp_utility_tax(SEXP optSEXP, SEXP parSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type opt(optSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(utility_tax(opt, par, type));
    return rcpp_result_gen;
END_RCPP
}
// tax_prob
std::vector<double> tax_prob(std::vector<double> par, GenericVector problems, int type);
RcppExport SEXP choicepp_tax_prob(SEXP parSEXP, SEXP problemsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(tax_prob(par, problems, type));
    return rcpp_result_gen;
END_RCPP
}
// tax_lik
double tax_lik(std::vector<double> par, GenericVector problems, std::vector<int> choices, int type, double limit);
RcppExport SEXP choicepp_tax_lik(SEXP parSEXP, SEXP problemsSEXP, SEXP choicesSEXP, SEXP typeSEXP, SEXP limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type limit(limitSEXP);
    rcpp_result_gen = Rcpp::wrap(tax_lik(par, problems, choices, type, limit));
    return rcpp_result_gen;
END_RCPP
}
// tax_choice
std::vector<int> tax_choice(std::vector<double> par, GenericVector problems, int type);
RcppExport SEXP choicepp_tax_choice(SEXP parSEXP, SEXP problemsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(tax_choice(par, problems, type));
    return rcpp_result_gen;
END_RCPP
}
// tax_rndchoice
std::vector<int> tax_rndchoice(std::vector<double> par, GenericVector problems, int type);
RcppExport SEXP choicepp_tax_rndchoice(SEXP parSEXP, SEXP problemsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(tax_rndchoice(par, problems, type));
    return rcpp_result_gen;
END_RCPP
}
